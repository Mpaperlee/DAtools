/*
 * This script was written for calculating coverage information of WES data as well as target sequencing data
 */
package ExomeSeqAnalysisPipe.CoverageGenerate;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import pub.FilelistReader;

/**
 *
 * @author Zinky
 */
public class CoverageForExomeSeq {

    private String regionfile;//bed format with at least 3 columns
//    private String coverfile;//this file should generated by "bedtools coverage"(for develop version:bedtools 2.25)
    private String outfile;//outputfile
    private ArrayList<String> coverfilelist;
    private int totalbases;//total target region bases

    public CoverageForExomeSeq(String regionfile, String coverfile, String outfile) {
        this.regionfile = regionfile;
//        this.coverfile = coverfile;
        this.outfile = outfile;
        this.readRegionfile();
//        this.processSingle();
    }

    //read Allfile with cov suffixed
    public CoverageForExomeSeq(String regionfile, String outfile) throws IOException {
        this.regionfile = regionfile;
        this.coverfilelist = FilelistReader.getFileArrayList(System.getProperty("user.dir"), ".cov");
        this.outfile = outfile;
        this.readRegionfile();
       this.writeOutList(this.readCoverfilelist());

    }

//    public void processSingle() {
//        CoverageOutClass co = this.readCovFile(coverfile);
//
//    }

    public void readRegionfile() {
        totalbases = 0;
        try {
            BufferedReader br = new BufferedReader(new java.io.FileReader(new File(regionfile)));
            int start;
            int end;
            while (br.ready()) {
                String dataStr = br.readLine().trim();
                start = Integer.parseInt(dataStr.split("\t")[1]);
                end = Integer.parseInt(dataStr.split("\t")[2]);
                totalbases += end - start;
            }

        } catch (IOException ex) {
        }
    }

    public CoverageOutClass readCovFile(String coverfile) {
        int totaldepth = 0;
        int seqedbases = 0;
        int dep0 = 0;
        int dep5 = 0;
        int dep10 = 0;
        int dep20 = 0;
        int dep30 = 0;
        int dep50 = 0;
         System.out.println(coverfile+" is processing");
        try {
            BufferedReader br = new BufferedReader(new java.io.FileReader(new File(coverfile)));
            int dep;
            while (br.ready()) {
                String[] dataStr = br.readLine().trim().split("\t");
                seqedbases++;
                if(dataStr.length!=5){
                    System.out.println(dataStr.length);
                    System.out.println(coverfile);
                }
                
                dep = Integer.parseInt(dataStr[4]);
                totaldepth += dep;
                if (dep >= 50) {
                    dep50++;
                } else if (dep >= 30) {
                    dep30++;
                } else if (dep >= 20) {
                    dep20++;
                } else if (dep >= 10) {
                    dep10++;
                } else if (dep >= 5) {
                    dep5++;
                }
            }
            dep30 += dep50;
            dep20 += dep30;
            dep10 += dep20;
            dep5 += dep10;
            dep0 = seqedbases;

            CoverageOutClass co = new CoverageOutClass(coverfile, totalbases, seqedbases);
            co.setSeqRate((double)seqedbases / totalbases);
            co.setAverageCov((double)totaldepth / totalbases);
            co.setOver5Rate((double)dep5 / totalbases);
            co.setOver10Rate((double)dep10 / totalbases);
            co.setOver20Rate((double)dep20 / totalbases);
            co.setOver30Rate((double)dep30 / totalbases);
            co.setOver50Rate((double)dep50 / totalbases);
            return co;
        } catch (IOException ex) {
            return null;
        }

    }

    public ArrayList<CoverageOutClass> readCoverfilelist() {
        ArrayList<CoverageOutClass> colist = new ArrayList<CoverageOutClass>();
        for (int i = 0; i < this.coverfilelist.size(); i++) {
            colist.add(this.readCovFile(coverfilelist.get(i)));
        }
        return colist;
    }

    public void writeOutList(ArrayList<CoverageOutClass> colist) throws FileNotFoundException, IOException {
        Workbook wb = new XSSFWorkbook();
        Sheet sheet1 = wb.createSheet("CoverageSummary");

        CellStyle style = wb.createCellStyle();
        style.setFillForegroundColor(IndexedColors.ORANGE.getIndex());
        style.setFillPattern(CellStyle.SOLID_FOREGROUND);

        int rowIndex;
        Row row = sheet1.createRow(0);
        row.createCell(0).setCellValue("Samplename");
        row.createCell(1).setCellValue("TotalTargetBases");
        row.createCell(2).setCellValue("Sequenced Bases");
        row.createCell(3).setCellValue("Sequenced Rate");
        row.createCell(4).setCellValue("AverageCoverage");
        row.createCell(5).setCellValue("Depth > 5");
        row.createCell(6).setCellValue("Depth > 10");
        row.createCell(7).setCellValue("Depth > 20");
        row.createCell(8).setCellValue("Depth > 30");
        row.createCell(9).setCellValue("Depth > 50");
        for (rowIndex = 0; rowIndex < colist.size(); rowIndex++) {
            row = sheet1.createRow(rowIndex + 1);
            row.createCell(0).setCellValue(colist.get(rowIndex).getSample());
            row.createCell(1).setCellValue(colist.get(rowIndex).getTargetbase());
            row.createCell(2).setCellValue(colist.get(rowIndex).getSeqedBase());
            row.createCell(3).setCellValue(colist.get(rowIndex).getSeqRate());
            row.createCell(4).setCellValue(colist.get(rowIndex).getAverageCov());
            row.createCell(5).setCellValue(colist.get(rowIndex).getOver5Rate());
            row.createCell(6).setCellValue(colist.get(rowIndex).getOver10Rate());
            row.createCell(7).setCellValue(colist.get(rowIndex).getOver20Rate());
            row.createCell(8).setCellValue(colist.get(rowIndex).getOver30Rate());
            row.createCell(9).setCellValue(colist.get(rowIndex).getOver50Rate());
        }

        FileOutputStream fileOut = new FileOutputStream(outfile + ".xlsx");
        wb.write(fileOut);
        fileOut.close();
        System.out.println("Convert finished. The output file is named as " + outfile + ".xlsx");
    }
}
